<?php

namespace wscvua\ws_admin_simple\models\blog;

use wscvua\ws_admin_simple\Module;
use Yii;
use yii\data\ActiveDataProvider;
use yii\helpers\BaseFileHelper;
use yii\web\UploadedFile;

/**
 * This is the model class for table "ws_content".
 *
 * @property integer $id
 * @property integer $page_id
 * @property integer $lang_id
 * @property string $title
 * @property string $description
 * @property string $key_words
 * @property string $link
 * @property integer $og_img
 * @property integer $published
 * @property WsPages $page
 * @property array $values
 * @property string|false $fileSrc
 */
class WsContent extends \yii\db\ActiveRecord
{
    public $imageFile;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'ws_content';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['page_id', 'lang_id'], 'required'],
            [['page_id', 'lang_id', 'published'], 'integer'],
            [['imageFile'], 'file', 'skipOnEmpty' => true, 'extensions' => 'png, jpg'],
            [['title', 'description', 'key_words', 'link', 'og_img'], 'string', 'max' => 255],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'page_id' => 'Page ID',
            'lang_id' => 'Lang ID',
            'title' => 'Title',
            'description' => 'Description',
            'key_words' => 'Key Words',
            'link' => 'Link',
            'og_img' => 'Og Img',
            'published' => 'Published',
        ];
    }

    public function upload()
    {
        $pathAlias = \Yii::getAlias("@frontend/web/uploads/seo/");
        BaseFileHelper::createDirectory($pathAlias);
        $file = UploadedFile::getInstance($this, '['.$this->lang_id.']imageFile');
//        var_dump($file);
        if($file){
            $path = $pathAlias.$this->lang->code.'.'.$file->extension;
            $file->saveAs($path);
            $this->og_img = $this->lang->code.'.'.$file->extension;
        }
    }

    public function getLang(){
        return $this->hasOne(WsLangs::className(), ['id' => 'lang_id']);
    }

    public function getFileSrc(){
        return $this->og_img ? '/uploads/seo/'.$this->og_img : false;
    }

    public function getPage(){
        return $this->hasOne(WsPages::className(), ['id' => 'page_id']);
    }

    public function getValues(){
        $out = [];
        foreach( $this->page->type->structure as $structure){
            $new = new $structure->class();
            $attr = [
                'model_class' => self::className(),
                'var_name' => $structure->var_name,
                'model_id' => $this->id,
            ];
            if($structure->is_list){
                $is = $new->find()->where($attr)->orderBy(['index'=>SORT_ASC])->all();
            }else{
                $is = $new->find()->where($attr)->one();
            }
            if($is){
                $out[$structure->var_name] = $is;
            }else{
                $out[$structure->var_name] = null;
            }
        }
        return $out;
    }

    public function getFormsModels(){
        $out = [];
        foreach( $this->page->type->structure as $structure){
            $new = new $structure->class();
            $attr = [
                'model_class' => self::className(),
                'var_name' => $structure->var_name,
                'model_id' => $this->id,
            ];
            $new->attributes = $attr;
            $out[$structure->var_name]['params'] = $structure->params;
            $out[$structure->var_name]['labels'] = $structure->labels;
            if($structure->is_list){
                    $out[$structure->var_name]['list'] = $new->find()
                        ->where($attr)
                        ->orderBy(['index'=>SORT_ASC])
                        ->all();
                $out[$structure->var_name]['new'] = $new;
            }else{
                $is = $new->find()->where($attr)->one();
                if($is){
                    $out[$structure->var_name]['one'] = $is;
                }else{
                    $out[$structure->var_name]['one'] = $new;
                }
            }
        }
        return $out;
    }

    public function beforeDelete()
    {
        foreach ($this->values as $var_name => $model){
            if($model && !$model->isNewRecord){
                $model->delete();
            }
        }
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public static function shortClassName($model){
        return \yii\helpers\StringHelper::basename(get_class($model));
    }

    public function loadVars(){
        foreach( $this->page->type->structure as $structure){
            $new = new $structure->class();
            $attr = [
                'model_class' => self::className(),
                'var_name' => $structure->var_name,
                'model_id' => $this->id,
            ];
            $shortClassName = \yii\helpers\StringHelper::basename(get_class($new));
            $postData = \Yii::$app->request->post($shortClassName)[$this->id][$structure->var_name];
//            Module::pre($postData);
            if(!$structure->is_list){
                $is = $new->find()->where($attr)->one();

                if(!$is){
                    $is = $new;
                    $is->attributes = $attr;
                }
                $is->attributes = $postData;
                if($is->value){
                    if(!$is->save()){
                        Module::pre($is->errors);
                    }
                }
            }else{
                if(isset($postData['new']) && $postData['new']){
                    //save new value
                    $new->attributes = $postData['new'];
                    if($new->value){
                        if(!$new->save()){
                            Module::pre($new->errors);
                        }
                    }
                }
                unset($postData['new']);
                if($postData){
                    $ids = array_keys($postData);
                    $list_models = $new->find()->where(['id'=>$ids])->all();

//                Module::pre($list_models);
//                Module::pre($postData);
                    foreach ($list_models as $item){
                        if(isset($postData[$item->id]) && $postData[$item->id]){
                            $item->attributes = $postData[$item->id];
                            $item->save();
                        }
                    }
                }
            }
        }



    }

    public function registerMetaTag(){
        \yii::$app->view->title = $this->title;
        $metaTag = [];
        if($this->description){
            $metaTag['description'] = $this->description;
        }
        if($this->key_words){
            $metaTag['keywords'] = $this->key_words;
        }
        if($metaTag){
            \Yii::$app->view->registerMetaTag($metaTag);
        }
    }

}
